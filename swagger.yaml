openapi: 3.1.0
info:
  title: Campina Retífica - Restful API
  version: v0
  description: API seguindo a arquitetura REST para um sistema de gestão de clientes e serviços de uma retífica.
servers:
  - url: http://localhost:8080
    description: Localhost
paths:
  /services:
    get:
      tags:
        - offered-service-controller
      operationId: findAllServices
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageOfferedServiceDTO'
    post:
      tags:
        - offered-service-controller
      operationId: createService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfferedServiceRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OfferedServiceDTO'
  /provided-services:
    get:
      tags:
        - provided-service-controller
      operationId: findAll
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageProvidedServiceResponse'
    post:
      tags:
        - provided-service-controller
      operationId: save
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvidedServiceRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProvidedServiceResponse'
  /customers:
    get:
      tags:
        - customer-controller
      operationId: listAllCustomers
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageCustomerDTO'
    post:
      tags:
        - customer-controller
      operationId: createCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerDTO'
  /auth:
    post:
      tags:
        - authentication-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenDTO'
  /services/{id}:
    get:
      tags:
        - offered-service-controller
      operationId: findServiceById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OfferedServiceDTO'
    patch:
      tags:
        - offered-service-controller
      operationId: updateService
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfferedServiceDTO'
        required: true
      responses:
        '200':
          description: OK
  /provided-services/pay/{id}:
    patch:
      tags:
        - provided-service-controller
      operationId: makePayment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /provided-services/complete-service/{id}:
    patch:
      tags:
        - provided-service-controller
      operationId: completeService
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /customers/{id}:
    get:
      tags:
        - customer-controller
      operationId: searchCustomerById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerDTO'
    delete:
      tags:
        - customer-controller
      operationId: deleteCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
    patch:
      tags:
        - customer-controller
      operationId: updateCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdateDTO'
        required: true
      responses:
        '200':
          description: OK
  /provided-services/{id}:
    get:
      tags:
        - provided-service-controller
      operationId: findById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProvidedServiceResponse'
    delete:
      tags:
        - provided-service-controller
      operationId: delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
components:
  schemas:
    OfferedServiceRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        value:
          type: number
      required:
        - description
        - name
        - value
    OfferedServiceDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        value:
          type: number
    ProvidedServiceRequest:
      type: object
      properties:
        serviceId:
          type: integer
          format: int64
        customerId:
          type: integer
          format: int64
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
      required:
        - customerId
        - endDate
        - serviceId
        - startDate
    ProvidedServiceResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        serviceName:
          type: string
        customerName:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - PENDING
            - IN_PROGRESS
            - COMPLETED
            - CANCELED
        paid:
          type: boolean
    CustomerDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
          maxLength: 30
          minLength: 0
        middleName:
          type: string
          maxLength: 50
          minLength: 0
        lastName:
          type: string
          maxLength: 65
          minLength: 0
        document:
          type: string
          minLength: 1
        email:
          type: string
          minLength: 1
        telephone:
          type: string
          maxLength: 35
          minLength: 0
      required:
        - document
        - email
        - firstName
        - lastName
        - middleName
        - telephone
    UserLoginDTO:
      type: object
      properties:
        username:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
      required:
        - password
        - username
    TokenDTO:
      type: object
      properties:
        token:
          type: string
    CustomerUpdateDTO:
      type: object
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        document:
          type: string
        email:
          type: string
        telephone:
          type: string
    Pageable:
      type: object
      properties:
        page:
          type: integer
          format: int32
          minimum: 0
        size:
          type: integer
          format: int32
          minimum: 1
        sort:
          type: array
          items:
            type: string
    PageOfferedServiceDTO:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/OfferedServiceDTO'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        paged:
          type: boolean
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PageProvidedServiceResponse:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProvidedServiceResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageCustomerDTO:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CustomerDTO'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
